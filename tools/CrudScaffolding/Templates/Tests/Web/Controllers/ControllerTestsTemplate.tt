<#@ import namespace="System.Collections" #>

<#+
public class ControllerTestsTemplate : BaseTemplate
{
	public ControllerTestsTemplate(string solutionName, EntityScaffoldingDetails entityScaffoldingDetails) 
		: base(solutionName, entityScaffoldingDetails) { }

	protected override void RenderCore()
	{
#>
using System;
using MvcContrib.TestHelper;
using NUnit.Framework;
using Rhino.Mocks;
using NUnit.Framework.SyntaxHelpers;
using SharpArch.Core.PersistenceSupport;
using SharpArch.Testing;
using System.Collections.Generic;
using System.Web.Mvc;
using <#= AppendNamespaceHierarchyTo(SolutionName + ".Core") #>;
using <#= AppendNamespaceHierarchyTo(SolutionName + ".Web.Controllers") #>;

namespace <#= AppendNamespaceHierarchyTo("Tests." + SolutionName + ".Web.Controllers") #>
{
    [TestFixture]
    public class <#= EntityScaffoldingDetails.EntityNamePlural #>ControllerTests
    {
        [SetUp]
        public void SetUp() {
            ServiceLocatorInitializer.Init();
            controller = new <#= EntityScaffoldingDetails.EntityNamePlural #>Controller(CreateMock<#= EntityScaffoldingDetails.EntityName #>Repository());
        }

        /// <summary>
        /// Add a couple of objects to the list within Create<#= EntityScaffoldingDetails.EntityNamePlural #> and change the 
        /// "Is.EqualTo(0)" within this test to the respective number.
        /// </summary>
        [Test]
        public void CanList<#= EntityScaffoldingDetails.EntityNamePlural #>() {
            ViewResult result = controller.Index().AssertViewRendered();

            Assert.That(result.ViewData.Model as List<<#= EntityScaffoldingDetails.EntityName #>>, Is.Not.Null);
            Assert.That((result.ViewData.Model as List<<#= EntityScaffoldingDetails.EntityName #>>).Count, Is.EqualTo(0));
        }

        [Test]
        public void CanShow<#= EntityScaffoldingDetails.EntityName #>() {
            ViewResult result = controller.Show(1).AssertViewRendered();

            Assert.That(result.ViewData.Model as <#= EntityScaffoldingDetails.EntityName #>, Is.Not.Null);
            Assert.That((result.ViewData.Model as <#= EntityScaffoldingDetails.EntityName #>).Id, Is.EqualTo(1));
        }

        [Test]
        public void CanInit<#= EntityScaffoldingDetails.EntityName #>Creation() {
            ViewResult result = controller.Create().AssertViewRendered();

            Assert.That(result.ViewData.Model as <#= EntityScaffoldingDetails.EntityName #>, Is.Null);
        }

        [Test]
        public void CanEnsure<#= EntityScaffoldingDetails.EntityName #>CreationIsValid() {
           <#= EntityScaffoldingDetails.EntityName #> <#= EntityScaffoldingDetails.EntityNameCamelCase #>FromForm = new <#= EntityScaffoldingDetails.EntityName #>();
            ViewResult result = controller.Create(<#= EntityScaffoldingDetails.EntityNameCamelCase #>FromForm).AssertViewRendered();

            Assert.That(result.ViewData.Model as <#= EntityScaffoldingDetails.EntityName #>, Is.Null);
            Assert.That(result.ViewData.ModelState.Count, Is.GreaterThan(0));

            // Example validation message test for lower level testing
            // Assert.That(result.ViewData.ModelState["<#= EntityScaffoldingDetails.EntityName #>.Name"].Errors[0].ErrorMessage, Is.Not.Empty);
        }

        [Test]
        public void CanCreate<#= EntityScaffoldingDetails.EntityName #>() {
            <#= EntityScaffoldingDetails.EntityName #> <#= EntityScaffoldingDetails.EntityNameCamelCase #>FromForm = CreateTransient<#= EntityScaffoldingDetails.EntityName #>();
            RedirectToRouteResult redirectResult = controller.Create(<#= EntityScaffoldingDetails.EntityNameCamelCase #>FromForm)
                .AssertActionRedirect().ToAction("Index");
            Assert.That(controller.TempData["message"].ToString().Contains("was successfully created"));
        }

        [Test]
        public void CanUpdate<#= EntityScaffoldingDetails.EntityName #>() {
            <#= EntityScaffoldingDetails.EntityName #> <#= EntityScaffoldingDetails.EntityNameCamelCase #>FromForm = CreateTransient<#= EntityScaffoldingDetails.EntityName #>();
            RedirectToRouteResult redirectResult = controller.Edit(1, <#= EntityScaffoldingDetails.EntityNameCamelCase #>FromForm)
                .AssertActionRedirect().ToAction("Index");
            Assert.That(controller.TempData["message"].ToString().Contains("was successfully updated"));
        }

        [Test]
        public void CanInit<#= EntityScaffoldingDetails.EntityName #>Edit() {
            ViewResult result = controller.Edit(1).AssertViewRendered();

            Assert.That(result.ViewData.Model as <#= EntityScaffoldingDetails.EntityName #>, Is.Not.Null);
            Assert.That((result.ViewData.Model as <#= EntityScaffoldingDetails.EntityName #>).Id, Is.EqualTo(1));
        }

        [Test]
        public void CanDelete<#= EntityScaffoldingDetails.EntityName #>() {
            RedirectToRouteResult redirectResult = controller.Delete(1)
                .AssertActionRedirect().ToAction("Index");
            Assert.That(controller.TempData["message"].ToString().Contains("was successfully deleted"));
        }

		#region Create Mock <#= EntityScaffoldingDetails.EntityName #> Repository

        private IRepository<<#= EntityScaffoldingDetails.EntityName #>> CreateMock<#= EntityScaffoldingDetails.EntityName #>Repository() {
            MockRepository mocks = new MockRepository();

            IRepository<<#= EntityScaffoldingDetails.EntityName #>> mockedRepository = mocks.StrictMock<IRepository<<#= EntityScaffoldingDetails.EntityName #>>>();
            Expect.Call(mockedRepository.GetAll())
                .Return(Create<#= EntityScaffoldingDetails.EntityNamePlural #>());
            Expect.Call(mockedRepository.Get(1)).IgnoreArguments()
                .Return(Create<#= EntityScaffoldingDetails.EntityName #>());
            Expect.Call(mockedRepository.SaveOrUpdate(null)).IgnoreArguments()
                .Return(Create<#= EntityScaffoldingDetails.EntityName #>());
            Expect.Call(delegate { mockedRepository.Delete(null); }).IgnoreArguments();

            IDbContext mockedDbContext = mocks.StrictMock<IDbContext>();
            Expect.Call(delegate { mockedDbContext.CommitChanges(); });
            SetupResult.For(mockedRepository.DbContext).Return(mockedDbContext);
            
            mocks.Replay(mockedRepository);

            return mockedRepository;
        }

        private <#= EntityScaffoldingDetails.EntityName #> Create<#= EntityScaffoldingDetails.EntityName #>() {
            <#= EntityScaffoldingDetails.EntityName #> <#= EntityScaffoldingDetails.EntityNameCamelCase #> = CreateTransient<#= EntityScaffoldingDetails.EntityName #>();
            EntityIdSetter.SetIdOf<int>(<#= EntityScaffoldingDetails.EntityNameCamelCase #>, 1);
            return <#= EntityScaffoldingDetails.EntityNameCamelCase #>;
        }

        private List<<#= EntityScaffoldingDetails.EntityName #>> Create<#= EntityScaffoldingDetails.EntityNamePlural #>() {
            List<<#= EntityScaffoldingDetails.EntityName #>> <#= EntityScaffoldingDetails.EntityNamePluralCamelCase #> = new List<<#= EntityScaffoldingDetails.EntityName #>>();

            // Create a number of domain object instances here and add them to the list

            return <#= EntityScaffoldingDetails.EntityNamePluralCamelCase #>;
        }
        
        #endregion

        /// <summary>
        /// Creates a valid, transient <#= EntityScaffoldingDetails.EntityName #>; typical of something retrieved back from a form submission
        /// </summary>
        private <#= EntityScaffoldingDetails.EntityName #> CreateTransient<#= EntityScaffoldingDetails.EntityName #>() {
            <#= EntityScaffoldingDetails.EntityName #> <#= EntityScaffoldingDetails.EntityNameCamelCase #> = new <#= EntityScaffoldingDetails.EntityName #>() {
				<#+
				PushIndent("\t\t\t\t");

				for (int i=0; i < EntityScaffoldingDetails.EntityProperties.Count; i++) {
					WriteLine(EntityScaffoldingDetails.EntityProperties[i].PropertyName + " = " + 
						EntityScaffoldingDetails.EntityProperties[i].GetDefaultValueForTests() + 
						((i < EntityScaffoldingDetails.EntityProperties.Count - 1) ? "," : ""));
				}

				PopIndent();
				#>
            };
            
            return <#= EntityScaffoldingDetails.EntityNameCamelCase #>;
        }

        private <#= EntityScaffoldingDetails.EntityNamePlural #>Controller controller;
    }
}
<#+
	}
}
#>
