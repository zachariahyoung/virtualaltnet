<?xml version="1.0" encoding="utf-8"?>
<project name="van" default="hello" xmlns="http://nant.sourceforge.net/release/0.85/nant.xsd">

    <property name="version" value="1.0.0.*" />

    <!--Main paths-->
  
    <property name="root-dir" value="."/>
    <property name="app-dir" value="${root-dir}\app" />
    <property name="lib-dir" value="${root-dir}\lib" />
    <property name="tools-dir" value="${root-dir}\tools" />
    <property name="test-dir" value="${root-dir}\tests\van.Tests\" />
    <property name="build-dir" value="${root-dir}\build" />
    <property name="build-debug-dir" value="${root-dir}\build\Debug" />
    <property name="build-release-dir" value="${root-dir}\build\Release"/>
    <property name="build-tests-dir" value="${root-dir}\build\Tests"/>
    <property name="build-web-dir" value="${build-dir}\build\deploymentdir\bin" />
    <property name="doc-dir" value="${root-dir}\doc" />
    <property name="test-report" value="${build-dir}\test-reports" />
    <property name="coverage" value="${build-dir}\coverage" />  
    <property name="version-file" value="${app-dir}\van.Version.xml"/>

      <!--Tools paths-->
    <property name="msbuild" value="C:\WINDOWS\Microsoft.NET\Framework\v3.5\MSBuild.exe" />
    <property name="nunitconsole" value="C:\Program Files\NUnit 2.4.8\bin\nunit-console.exe" />
    <!--<property name="spec-report" value="${build-dir}\SpecUnit.Report.exe" />-->
    <echo message="msbuild tool path => ${msbuild} "/>
    <echo message="Project root path => ${root-dir} "/>  
    <!--External targets-->
    <target name="build-debug" depends="_clean-build-dir, _make-build-dir, _compile-debug, _copy-debug-artifacts-to-build-debug-dir" />
    <target name="compile-web" depends="build-debug, _compile-web" />
    <target name="build-release" depends="_clean-build-dir, _make-build-dir, _compile-release, _copy-release-artifacts-to-build-dir" />
    <target name="test" depends="build-debug, _test" description="Compile and run tests" />
    <!--<target name="generate-spec-report" depends="test, _generate-spec-report" description="Generate the specification report" />-->
    <target name="update-version" depends="_get-current-version, _generate-assembly-info" description="Get current version and assign it to assembly metadata" />
    <!--<target name="package" depends="update-version, build-release, _generate-spec-report, _package-build" description="Build and package a release" />
    <target name="tc-build" depends="update-version, build-debug, _test, _tc-test, _generate-spec-report, _package-build" description="Compile and run tests" />-->  
  
    <target name="hello">
      <echo message="Hi, how are you?" />
      <echo message="You need to tell the build system which target to run" />
      <echo message="" />
      <echo message="To get started, try: nant test" />
      <echo message="" />
      <echo message="Here are a few more helpful targets found in ${path::get-full-path(path::get-file-name(project::get-buildfile-uri()))}" />
      <echo message="=> test" />
      <echo message="=> build-web" />
      <echo message="=> build-debug" />
      <echo message="=> build-release" />
      <echo message="=> package" />
  </target>

  <!--Clean build dir-->
  <target name="_clean-build-dir" description="Delete automated build artifacts">
    <delete dir="${build-dir}" if="${directory::exists(build-dir)}" failonerror="false"/>
  </target>

  <!--Make build dir-->
  <target name="_make-build-dir" description="Create build dir and build report dir">
    <mkdir dir="${build-dir}" unless="${directory::exists(build-dir)}" />
    <mkdir dir="${test-report}" unless="${directory::exists(test-report)}" />
    <mkdir dir="${coverage}" unless="${directory::exists(coverage)}" />
  </target>

  <!--Make build debug dir-->
  <target name="_make-build-debug-dir" description="Create build dir and build report dir">
    <mkdir dir="${build-debug-dir}" unless="${directory::exists(build-debug-dir)}" />
  </target>

  
  <!-- Compile using the Debug Configuration -->
  <target name="_compile-debug" description="Compile using the Debug Configuration">
    <exec program="${msbuild}">
      <arg value="${root-dir}\van.sln" />
      <arg value="/v:n" />
      <arg value="/p:Configuration=Debug" />
      <arg value="/p:WarningLevel=0" />
      <arg value="/p:SolutionDir=${app-dir}" />
    </exec>
  </target>

  <!--After compile copy artifacts to build debug dir-->
  <target name="_copy-debug-artifacts-to-build-debug-dir">
    <copy todir="${build-debug-dir}" overwrite="true">
      <fileset basedir="${app-dir}\van.Core\bin\Debug\">
        <include name="*.*" />
      </fileset>
    </copy>
    <copy todir="${build-debug-dir}" overwrite="true">
      <fileset basedir="${app-dir}\van.Data\bin\Debug\">
        <include name="*.*" />
      </fileset>
    </copy>
    <copy todir="${build-debug-dir}" overwrite="true">
      <fileset basedir="${app-dir}\van.Web.Controllers\bin\Debug\">
        <include name="*.*" />
      </fileset>
    </copy>
    <copy todir="${build-tests-dir}" overwrite="true">
      <fileset basedir="${test-dir}\bin\Debug\">
        <include name="*.*" />
      </fileset>
    </copy>
  </target>
  <!-- Compile using the Release Configuration -->
  <target name="_compile-release" description="Compile using the Release Configuration">
    <exec program="${msbuild}">
      <arg value="${root-dir}\van.sln" />
      <arg value="/v:n" />
      <arg value="/p:Configuration=Release" />
      <arg value="/p:WarningLevel=0" />
      <arg value="/p:SolutionDir=${app-dir}" />
    </exec>
  </target>

  <target name="_copy-release-artifacts-to-build-dir">
    <copy todir="${build-release-dir}" overwrite="true">
      <fileset basedir="${app-dir}\Van.Core\bin\Release\">
        <include name="*.*" />
      </fileset>
    </copy>
    <copy todir="${build-release-dir}" overwrite="true">
      <fileset basedir="${app-dir}\Van.Data\bin\Release\">
        <include name="*.*" />
      </fileset>
    </copy>
    <copy todir="${build-release-dir}" overwrite="true">
      <fileset basedir="${app-dir}\Van.WebControllers\bin\Release\">
        <include name="*.*" />
      </fileset>
    </copy>
    <copy todir="${build-tests-dir}" overwrite="true">
      <fileset basedir="${test-dir}\bin\Release\">
        <include name="*.*" />
      </fileset>
    </copy>
  </target>
  <!--Test-->
  <target name="_test">
    <mkdir dir="C:\Program Files\NUnit 2.4.8\bin\addins"/>
    <copy file="${teamcity.dotnet.nunitaddin}-2.4.8.dll" todir="C:\Program Files\NUnit 2.4.8\bin\addins"/>
    <exec program="${nunitconsole}" verbose="true" failonerror="false">
      <arg value="${build-tests-dir}/van.Tests.dll" />
      <arg value="/nologo" />
    </exec>
  </target>

  <!--TeamCity test launcher-->
  <target name="_tc-test">
    <exec program="${teamcity.dotnet.nunitlauncher2.0}" failonerror="false">
      <arg file="..\build\Tests\van.Tests.dll"/>
    </exec>
  </target>

  <echo message="&lt;configuration&gt;
     &lt;runtime&gt;
   &lt;assemblyBinding
xmlns=&quot;urn:schemas-microsoft-com:asm.v1&quot;&gt;
   &lt;dependentAssembly&gt;
   &lt;assemblyIdentity name=&quot;nunit.framework&quot;
   publicKeyToken=&quot;96d09a1eb7f44a77&quot;
   culture=&quot;Neutral&quot; /&gt;
   &lt;bindingRedirect oldVersion=&quot;0.0.0.0-2.4.7.0&quot;
newVersion=&quot;2.4.8.0&quot; /&gt;
   &lt;/dependentAssembly&gt;
   &lt;/assemblyBinding&gt;
   &lt;/runtime&gt;
  &lt;/configuration&gt;
  " file="${build-tests-dir}\test.config" append="false" />

  <nunit2 failonerror="false">
    <formatter type="Xml" usefile="true" extension=".xml" outputdir="build"/>
    <test  appconfig="${build-tests-dir}\test.config">
      <assemblies>
        <include name="${build-tests-dir}\van.Tests.dll" />
      </assemblies>
    </test>
  </nunit2>

  <!-- NCover Properties-->
  <property name="Program" value="C:\Program Files\NCover\ncover.console.exe" />
  <property name="testRunnerArgs" value="${build-tests-dir}\van.Tests.dll" />
  <property name="htmlReportDir" value="${coverage}" />
  <property name="appendTrendTo" value="${test-report}\TestCoverageTrends.trend" />
  <property name="coverageFile" value="${test-report}\Coverage.xml" />
  <property name="logLevel" value="Normal" />
  <property name="projectName" value="van" />
  <property name="registerProfiler" value="True" />
  <property name="symbolSearchLocations" value="Registry, SymbolServer, BuildPath, ExecutingDir" />
  <property name="workingDirectory" value="..\tools\NUnit" />
  
  <target name="_coverage" description="Generate code coverage using NCover">
    <exec command="&quot;${Program}&quot; &quot;${nunitconsole}&quot; ${testRunnerArgs} //h &quot;${htmlReportDir}&quot; //at &quot;${appendTrendTo}&quot; //x &quot;${coverageFile}&quot; //ll &quot;${logLevel}&quot; //p &quot;${projectName}&quot; //reg //ssp &quot;${symbolSearchLocations}&quot; //w &quot;${workingDirectory}&quot;" />
  </target>
  
  <!-- Compile the web site -->
  <target name="_compile-web" description="Compile Web Site.">
    <exec program="${msbuild}"
    commandline="${app-dir}\van.web\van.web.csproj /nologo 
  /t:Rebuild
  /t:ResolveReferences;_CopyWebApplication
  /p:OutDir=${build-dir}\deploymentdir\bin\
  /p:WebProjectOutputDir=${build-dir}\deploymentdir\"
    workingdir="."
    failonerror="true" />
    <delete>
      <fileset>
        <include dir="${build-dir}\deploymentdir\" name="Web.config"/>
        <include dir="${build-dir}\deploymentdir\" name="NHibernate.config"/>
      </fileset>
    </delete>
  </target>


  <!--Version-->
  <target name="_get-current-version">
    <if test="${environment::variable-exists('BUILD_NUMBER')}">
      <property name="version" value="${environment::get-variable('BUILD_NUMBER')}" />
    </if>

    <echo message="Got version number: ${version}"/>
  </target>

  <target name="_generate-assembly-info">
    <asminfo output="${root-dir}\CommonAssemblyInfo.cs" language="CSharp" verbose="true">
      <imports>
        <import namespace="System.Reflection" />
        <import namespace="System.Runtime.CompilerServices" />
        <import namespace="System.Runtime.InteropServices" />
      </imports>
      <attributes>
        <attribute type="AssemblyCompanyAttribute" value="Virtual Alt Net" />
        <attribute type="AssemblyCopyrightAttribute" value="Copyright © Virtual Alt Net 2009" />
        <attribute type="AssemblyVersionAttribute" value="${version}" />
        <attribute type="AssemblyFileVersionAttribute" value="${version}" />
      </attributes>
      <references>
        <include name="System.Reflection.dll" />
      </references>
    </asminfo>

    <echo message="Assigned version number: ${version}"/>
  </target>
  
  <target name="print-system-time">
    <echo message="Current time: ${datetime::now()}" />
  </target>
  </project>